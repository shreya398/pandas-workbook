{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNuQqOKUYk0/827mooInUAA"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"btDCWLDrU4Rd"},"outputs":[],"source":["#Import Data set\n","import pandas as pd"]},{"cell_type":"code","source":["from google.colab import files\n","uploaded=files.upload()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"_U71HsctVY9T","executionInfo":{"status":"ok","timestamp":1667493964839,"user_tz":-330,"elapsed":19445,"user":{"displayName":"SHREYA GUGGARE","userId":"00326160733976591193"}},"outputId":"8795db43-1fe1-4ad6-eda7-48b06e722ed9"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-af63dbfc-d00a-430d-a3b2-faefd05423ed\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-af63dbfc-d00a-430d-a3b2-faefd05423ed\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving delivery_time.csv to delivery_time (1).csv\n"]}]},{"cell_type":"code","source":["data=pd.read_csv(\"delivery_time.csv\")"],"metadata":{"id":"R1vjrh9DVsiT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"UmlRzNaFV7Xm","executionInfo":{"status":"ok","timestamp":1667493970469,"user_tz":-330,"elapsed":483,"user":{"displayName":"SHREYA GUGGARE","userId":"00326160733976591193"}},"outputId":"a5477682-41e2-4789-f344-c07aafb74f2f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Delivery Time  Sorting Time\n","0          21.00            10\n","1          13.50             4\n","2          19.75             6\n","3          24.00             9\n","4          29.00            10"],"text/html":["\n","  <div id=\"df-c7a31381-18da-41af-bed2-4f9fd0c8ba40\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Delivery Time</th>\n","      <th>Sorting Time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>21.00</td>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>13.50</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>19.75</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>24.00</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>29.00</td>\n","      <td>10</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c7a31381-18da-41af-bed2-4f9fd0c8ba40')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c7a31381-18da-41af-bed2-4f9fd0c8ba40 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c7a31381-18da-41af-bed2-4f9fd0c8ba40');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["data.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"M7GdoHbpWppt","executionInfo":{"status":"ok","timestamp":1667493973444,"user_tz":-330,"elapsed":426,"user":{"displayName":"SHREYA GUGGARE","userId":"00326160733976591193"}},"outputId":"6a480d07-2c46-486e-a5c1-f6ac8e790bd3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 21 entries, 0 to 20\n","Data columns (total 2 columns):\n"," #   Column         Non-Null Count  Dtype  \n","---  ------         --------------  -----  \n"," 0   Delivery Time  21 non-null     float64\n"," 1   Sorting Time   21 non-null     int64  \n","dtypes: float64(1), int64(1)\n","memory usage: 464.0 bytes\n"]}]},{"cell_type":"code","source":["# Renaming the column\n","data.rename(columns={'Delivery Time':'DT','Sorting Time':'ST'},inplace=True)"],"metadata":{"id":"Gg1-2Pb_ZYUP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"5hKW-Qugae1_","executionInfo":{"status":"ok","timestamp":1667494456056,"user_tz":-330,"elapsed":655,"user":{"displayName":"SHREYA GUGGARE","userId":"00326160733976591193"}},"outputId":"b456026d-84af-4827-9bef-32430c567b26"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["              DT         ST\n","count  21.000000  21.000000\n","mean   16.790952   6.190476\n","std     5.074901   2.542028\n","min     8.000000   2.000000\n","25%    13.500000   4.000000\n","50%    17.830000   6.000000\n","75%    19.750000   8.000000\n","max    29.000000  10.000000"],"text/html":["\n","  <div id=\"df-6647c0a7-3189-409c-b628-6f2a068fac46\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>DT</th>\n","      <th>ST</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>21.000000</td>\n","      <td>21.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>16.790952</td>\n","      <td>6.190476</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>5.074901</td>\n","      <td>2.542028</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>8.000000</td>\n","      <td>2.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>13.500000</td>\n","      <td>4.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>17.830000</td>\n","      <td>6.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>19.750000</td>\n","      <td>8.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>29.000000</td>\n","      <td>10.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6647c0a7-3189-409c-b628-6f2a068fac46')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-6647c0a7-3189-409c-b628-6f2a068fac46 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-6647c0a7-3189-409c-b628-6f2a068fac46');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":34}]},{"cell_type":"code","source":["#Correlation\n"],"metadata":{"id":"HiCd_uSsWuYR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data.corr()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":112},"id":"t2QKFIY2W0MW","executionInfo":{"status":"ok","timestamp":1667494184909,"user_tz":-330,"elapsed":9,"user":{"displayName":"SHREYA GUGGARE","userId":"00326160733976591193"}},"outputId":"c6fe2826-5d73-40a8-8027-04edd390c02c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          DT        ST\n","DT  1.000000  0.825997\n","ST  0.825997  1.000000"],"text/html":["\n","  <div id=\"df-9f4e0fb1-ffdb-4f37-ac75-f1d42c5ba2a2\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>DT</th>\n","      <th>ST</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>DT</th>\n","      <td>1.000000</td>\n","      <td>0.825997</td>\n","    </tr>\n","    <tr>\n","      <th>ST</th>\n","      <td>0.825997</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9f4e0fb1-ffdb-4f37-ac75-f1d42c5ba2a2')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-9f4e0fb1-ffdb-4f37-ac75-f1d42c5ba2a2 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-9f4e0fb1-ffdb-4f37-ac75-f1d42c5ba2a2');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["import seaborn as sns\n","sns.displot(data['DT'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":386},"id":"WxemybWhW_BA","executionInfo":{"status":"ok","timestamp":1667494204169,"user_tz":-330,"elapsed":539,"user":{"displayName":"SHREYA GUGGARE","userId":"00326160733976591193"}},"outputId":"349addb7-638d-4674-96b0-d3818785b8cb"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<seaborn.axisgrid.FacetGrid at 0x7fbbb3f5d190>"]},"metadata":{},"execution_count":29},{"output_type":"display_data","data":{"text/plain":["<Figure size 360x360 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["import seaborn as sns\n","sns.displot(data['ST'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":386},"id":"uvoO9LKcXPfR","executionInfo":{"status":"ok","timestamp":1667494218701,"user_tz":-330,"elapsed":411,"user":{"displayName":"SHREYA GUGGARE","userId":"00326160733976591193"}},"outputId":"096bb04d-bd77-4b66-996d-0a47ef9eb28f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<seaborn.axisgrid.FacetGrid at 0x7fbbb4002f50>"]},"metadata":{},"execution_count":30},{"output_type":"display_data","data":{"text/plain":["<Figure size 360x360 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["#Fitting a Linear Regression model"],"metadata":{"id":"2gAmuIdyXbbu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import statsmodels.formula.api as smf\n","model = smf.ols(\"DT~ST\",data = data).fit()"],"metadata":{"id":"UWtxWlROZtuM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["sns.regplot(x=\"ST\",y=\"DT\",data=data,color='purple')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"UaMvvmIFZtq5","executionInfo":{"status":"ok","timestamp":1667494579224,"user_tz":-330,"elapsed":851,"user":{"displayName":"SHREYA GUGGARE","userId":"00326160733976591193"}},"outputId":"64bc7a6b-dc95-4855-9bee-522f369b55c5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fbbb3adae90>"]},"metadata":{},"execution_count":37},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["#Coefficients\n","model.params"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y10t3AdMbrFg","executionInfo":{"status":"ok","timestamp":1667494787906,"user_tz":-330,"elapsed":473,"user":{"displayName":"SHREYA GUGGARE","userId":"00326160733976591193"}},"outputId":"e49ba45b-fd40-4e61-9dca-6e2c10da2e55"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Intercept    6.582734\n","ST           1.649020\n","dtype: float64"]},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":["(1.33*5025)+6.5827"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pANdegC1b1Gd","executionInfo":{"status":"ok","timestamp":1667494840667,"user_tz":-330,"elapsed":390,"user":{"displayName":"SHREYA GUGGARE","userId":"00326160733976591193"}},"outputId":"2a7b1ce7-07f7-4b63-d8c0-f4a30c1501bf"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["6689.8327"]},"metadata":{},"execution_count":42}]},{"cell_type":"code","source":["#t and p-values\n","print(model.tvalues,'\\n',model.pvalues)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mApFLgMzbJqM","executionInfo":{"status":"ok","timestamp":1667494878039,"user_tz":-330,"elapsed":439,"user":{"displayName":"SHREYA GUGGARE","userId":"00326160733976591193"}},"outputId":"e5176e24-285d-4df3-d803-08abb9d1df23"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Intercept    3.823349\n","ST           6.387447\n","dtype: float64 \n"," Intercept    0.001147\n","ST           0.000004\n","dtype: float64\n"]}]},{"cell_type":"code","source":["model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":452},"id":"IMwJeY22cdth","executionInfo":{"status":"ok","timestamp":1667494993349,"user_tz":-330,"elapsed":422,"user":{"displayName":"SHREYA GUGGARE","userId":"00326160733976591193"}},"outputId":"2e9e6258-a56d-480b-af5b-2bf92dac9984"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<class 'statsmodels.iolib.summary.Summary'>\n","\"\"\"\n","                            OLS Regression Results                            \n","==============================================================================\n","Dep. Variable:                     DT   R-squared:                       0.682\n","Model:                            OLS   Adj. R-squared:                  0.666\n","Method:                 Least Squares   F-statistic:                     40.80\n","Date:                Thu, 03 Nov 2022   Prob (F-statistic):           3.98e-06\n","Time:                        17:03:11   Log-Likelihood:                -51.357\n","No. Observations:                  21   AIC:                             106.7\n","Df Residuals:                      19   BIC:                             108.8\n","Df Model:                           1                                         \n","Covariance Type:            nonrobust                                         \n","==============================================================================\n","                 coef    std err          t      P>|t|      [0.025      0.975]\n","------------------------------------------------------------------------------\n","Intercept      6.5827      1.722      3.823      0.001       2.979      10.186\n","ST             1.6490      0.258      6.387      0.000       1.109       2.189\n","==============================================================================\n","Omnibus:                        3.649   Durbin-Watson:                   1.248\n","Prob(Omnibus):                  0.161   Jarque-Bera (JB):                2.086\n","Skew:                           0.750   Prob(JB):                        0.352\n","Kurtosis:                       3.367   Cond. No.                         18.3\n","==============================================================================\n","\n","Notes:\n","[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n","\"\"\""],"text/html":["<table class=\"simpletable\">\n","<caption>OLS Regression Results</caption>\n","<tr>\n","  <th>Dep. Variable:</th>           <td>DT</td>        <th>  R-squared:         </th> <td>   0.682</td>\n","</tr>\n","<tr>\n","  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.666</td>\n","</tr>\n","<tr>\n","  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   40.80</td>\n","</tr>\n","<tr>\n","  <th>Date:</th>             <td>Thu, 03 Nov 2022</td> <th>  Prob (F-statistic):</th> <td>3.98e-06</td>\n","</tr>\n","<tr>\n","  <th>Time:</th>                 <td>17:03:11</td>     <th>  Log-Likelihood:    </th> <td> -51.357</td>\n","</tr>\n","<tr>\n","  <th>No. Observations:</th>      <td>    21</td>      <th>  AIC:               </th> <td>   106.7</td>\n","</tr>\n","<tr>\n","  <th>Df Residuals:</th>          <td>    19</td>      <th>  BIC:               </th> <td>   108.8</td>\n","</tr>\n","<tr>\n","  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n","</tr>\n","<tr>\n","  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n","</tr>\n","</table>\n","<table class=\"simpletable\">\n","<tr>\n","      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n","</tr>\n","<tr>\n","  <th>Intercept</th> <td>    6.5827</td> <td>    1.722</td> <td>    3.823</td> <td> 0.001</td> <td>    2.979</td> <td>   10.186</td>\n","</tr>\n","<tr>\n","  <th>ST</th>        <td>    1.6490</td> <td>    0.258</td> <td>    6.387</td> <td> 0.000</td> <td>    1.109</td> <td>    2.189</td>\n","</tr>\n","</table>\n","<table class=\"simpletable\">\n","<tr>\n","  <th>Omnibus:</th>       <td> 3.649</td> <th>  Durbin-Watson:     </th> <td>   1.248</td>\n","</tr>\n","<tr>\n","  <th>Prob(Omnibus):</th> <td> 0.161</td> <th>  Jarque-Bera (JB):  </th> <td>   2.086</td>\n","</tr>\n","<tr>\n","  <th>Skew:</th>          <td> 0.750</td> <th>  Prob(JB):          </th> <td>   0.352</td>\n","</tr>\n","<tr>\n","  <th>Kurtosis:</th>      <td> 3.367</td> <th>  Cond. No.          </th> <td>    18.3</td>\n","</tr>\n","</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."]},"metadata":{},"execution_count":45}]},{"cell_type":"code","source":["#R-squared values\n","(model.rsquared,model.rsquared_adj)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XhTtqulgbWNM","executionInfo":{"status":"ok","timestamp":1667494694360,"user_tz":-330,"elapsed":436,"user":{"displayName":"SHREYA GUGGARE","userId":"00326160733976591193"}},"outputId":"2faca990-f97d-4da5-9e56-04568a5ac9b3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(0.6822714748417231, 0.6655489208860244)"]},"metadata":{},"execution_count":39}]},{"cell_type":"code","source":["#Import Data set\n","from google.colab import files\n","uploaded=files.upload()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":39},"id":"V9yGQ2PXeaEb","outputId":"9f95ac3d-8cd9-4f05-bdef-19bceb5ed3a3"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-72e20994-7ee6-44ff-b45a-5e49b1b3d733\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-72e20994-7ee6-44ff-b45a-5e49b1b3d733\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}}]},{"cell_type":"code","source":["data1=pd.read_csv(\"Salary_Data.csv\")"],"metadata":{"id":"vaQAsG5Den60"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data1.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"uaQDYQtjexfS","executionInfo":{"status":"ok","timestamp":1667495573854,"user_tz":-330,"elapsed":9,"user":{"displayName":"SHREYA GUGGARE","userId":"00326160733976591193"}},"outputId":"56a4f80b-713a-4d16-b40c-80b96dfa8808"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   YearsExperience   Salary\n","0              1.1  39343.0\n","1              1.3  46205.0\n","2              1.5  37731.0\n","3              2.0  43525.0\n","4              2.2  39891.0"],"text/html":["\n","  <div id=\"df-cbcf6373-dcc0-4580-a0ce-01afdbc9e64f\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>YearsExperience</th>\n","      <th>Salary</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.1</td>\n","      <td>39343.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.3</td>\n","      <td>46205.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.5</td>\n","      <td>37731.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2.0</td>\n","      <td>43525.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2.2</td>\n","      <td>39891.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cbcf6373-dcc0-4580-a0ce-01afdbc9e64f')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-cbcf6373-dcc0-4580-a0ce-01afdbc9e64f button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-cbcf6373-dcc0-4580-a0ce-01afdbc9e64f');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":48}]},{"cell_type":"code","source":["# Renaming the column\n","data1.rename(columns={'YearsExperience':'Exp'},inplace=True)"],"metadata":{"id":"TK41fjiAe9SH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":990},"id":"rZrjZKE-fPSM","executionInfo":{"status":"ok","timestamp":1667495695450,"user_tz":-330,"elapsed":422,"user":{"displayName":"SHREYA GUGGARE","userId":"00326160733976591193"}},"outputId":"e990bf47-f491-4059-8f42-2a0c1aa3ca2c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Exp    Salary\n","0    1.1   39343.0\n","1    1.3   46205.0\n","2    1.5   37731.0\n","3    2.0   43525.0\n","4    2.2   39891.0\n","5    2.9   56642.0\n","6    3.0   60150.0\n","7    3.2   54445.0\n","8    3.2   64445.0\n","9    3.7   57189.0\n","10   3.9   63218.0\n","11   4.0   55794.0\n","12   4.0   56957.0\n","13   4.1   57081.0\n","14   4.5   61111.0\n","15   4.9   67938.0\n","16   5.1   66029.0\n","17   5.3   83088.0\n","18   5.9   81363.0\n","19   6.0   93940.0\n","20   6.8   91738.0\n","21   7.1   98273.0\n","22   7.9  101302.0\n","23   8.2  113812.0\n","24   8.7  109431.0\n","25   9.0  105582.0\n","26   9.5  116969.0\n","27   9.6  112635.0\n","28  10.3  122391.0\n","29  10.5  121872.0"],"text/html":["\n","  <div id=\"df-ba8a7ead-cfb9-4d5f-a86f-62b23a71704c\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Exp</th>\n","      <th>Salary</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.1</td>\n","      <td>39343.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.3</td>\n","      <td>46205.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.5</td>\n","      <td>37731.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2.0</td>\n","      <td>43525.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2.2</td>\n","      <td>39891.0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>2.9</td>\n","      <td>56642.0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>3.0</td>\n","      <td>60150.0</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>3.2</td>\n","      <td>54445.0</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>3.2</td>\n","      <td>64445.0</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>3.7</td>\n","      <td>57189.0</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>3.9</td>\n","      <td>63218.0</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>4.0</td>\n","      <td>55794.0</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>4.0</td>\n","      <td>56957.0</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>4.1</td>\n","      <td>57081.0</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>4.5</td>\n","      <td>61111.0</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>4.9</td>\n","      <td>67938.0</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>5.1</td>\n","      <td>66029.0</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>5.3</td>\n","      <td>83088.0</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>5.9</td>\n","      <td>81363.0</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>6.0</td>\n","      <td>93940.0</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>6.8</td>\n","      <td>91738.0</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>7.1</td>\n","      <td>98273.0</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>7.9</td>\n","      <td>101302.0</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>8.2</td>\n","      <td>113812.0</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>8.7</td>\n","      <td>109431.0</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>9.0</td>\n","      <td>105582.0</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>9.5</td>\n","      <td>116969.0</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>9.6</td>\n","      <td>112635.0</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>10.3</td>\n","      <td>122391.0</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>10.5</td>\n","      <td>121872.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ba8a7ead-cfb9-4d5f-a86f-62b23a71704c')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-ba8a7ead-cfb9-4d5f-a86f-62b23a71704c button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-ba8a7ead-cfb9-4d5f-a86f-62b23a71704c');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":51}]},{"cell_type":"code","source":["data1.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-rU3TL6BfUWa","executionInfo":{"status":"ok","timestamp":1667495718339,"user_tz":-330,"elapsed":7,"user":{"displayName":"SHREYA GUGGARE","userId":"00326160733976591193"}},"outputId":"39fe4d33-f0d8-4a0f-8021-6e6d65473307"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 30 entries, 0 to 29\n","Data columns (total 2 columns):\n"," #   Column  Non-Null Count  Dtype  \n","---  ------  --------------  -----  \n"," 0   Exp     30 non-null     float64\n"," 1   Salary  30 non-null     float64\n","dtypes: float64(2)\n","memory usage: 608.0 bytes\n"]}]},{"cell_type":"code","source":["#Correlation\n","data1.corr()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":112},"id":"dHiLObqSfby-","executionInfo":{"status":"ok","timestamp":1667495749335,"user_tz":-330,"elapsed":793,"user":{"displayName":"SHREYA GUGGARE","userId":"00326160733976591193"}},"outputId":"8d83d255-a0ce-42dd-e709-a79727e0673f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             Exp    Salary\n","Exp     1.000000  0.978242\n","Salary  0.978242  1.000000"],"text/html":["\n","  <div id=\"df-970bd3e7-348c-4c59-914d-fa422e95d161\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Exp</th>\n","      <th>Salary</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Exp</th>\n","      <td>1.000000</td>\n","      <td>0.978242</td>\n","    </tr>\n","    <tr>\n","      <th>Salary</th>\n","      <td>0.978242</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-970bd3e7-348c-4c59-914d-fa422e95d161')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-970bd3e7-348c-4c59-914d-fa422e95d161 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-970bd3e7-348c-4c59-914d-fa422e95d161');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":53}]},{"cell_type":"code","source":["import seaborn as sns\n","sns.distplot(data1['Exp'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":351},"id":"OaVXcxDefgZT","executionInfo":{"status":"ok","timestamp":1667495796234,"user_tz":-330,"elapsed":439,"user":{"displayName":"SHREYA GUGGARE","userId":"00326160733976591193"}},"outputId":"04546362-f5fa-4c4c-894a-80eccf074d65"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n","  warnings.warn(msg, FutureWarning)\n"]},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fbbb3969d50>"]},"metadata":{},"execution_count":54},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["import seaborn as sns\n","sns.distplot(data1['Salary'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":362},"id":"kC0ZVaBbfyWI","executionInfo":{"status":"ok","timestamp":1667495847131,"user_tz":-330,"elapsed":491,"user":{"displayName":"SHREYA GUGGARE","userId":"00326160733976591193"}},"outputId":"28a6a0de-6e28-476b-b65f-bbdc1ee5d5f8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n","  warnings.warn(msg, FutureWarning)\n"]},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fbbb3955250>"]},"metadata":{},"execution_count":55},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["#Fitting Linear regression model\n","import statsmodels.formula.api as smf\n","model = smf.ols(\"Salary~Exp\",data = data1).fit()"],"metadata":{"id":"_oE3itTVgPT6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["sns.regplot(x=\"Exp\", y=\"Salary\", data=data1,color='red');"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":279},"id":"aGlZoostgtZf","executionInfo":{"status":"ok","timestamp":1667496309199,"user_tz":-330,"elapsed":742,"user":{"displayName":"SHREYA GUGGARE","userId":"00326160733976591193"}},"outputId":"f473b3e1-7d7f-4c8a-b190-7dd267c01d3d"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["model.params"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fU7aG4qTg5Vm","executionInfo":{"status":"ok","timestamp":1667496133162,"user_tz":-330,"elapsed":498,"user":{"displayName":"SHREYA GUGGARE","userId":"00326160733976591193"}},"outputId":"d37b27d2-b664-48d4-a414-9d7f29342572"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Intercept    25792.200199\n","Exp           9449.962321\n","dtype: float64"]},"metadata":{},"execution_count":58}]},{"cell_type":"code","source":["model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":452},"id":"hEhgrB8hhLeI","executionInfo":{"status":"ok","timestamp":1667496216212,"user_tz":-330,"elapsed":8,"user":{"displayName":"SHREYA GUGGARE","userId":"00326160733976591193"}},"outputId":"7c301b98-04cb-40b0-ea60-63f4685f3bbe"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<class 'statsmodels.iolib.summary.Summary'>\n","\"\"\"\n","                            OLS Regression Results                            \n","==============================================================================\n","Dep. Variable:                 Salary   R-squared:                       0.957\n","Model:                            OLS   Adj. R-squared:                  0.955\n","Method:                 Least Squares   F-statistic:                     622.5\n","Date:                Thu, 03 Nov 2022   Prob (F-statistic):           1.14e-20\n","Time:                        17:23:34   Log-Likelihood:                -301.44\n","No. Observations:                  30   AIC:                             606.9\n","Df Residuals:                      28   BIC:                             609.7\n","Df Model:                           1                                         \n","Covariance Type:            nonrobust                                         \n","==============================================================================\n","                 coef    std err          t      P>|t|      [0.025      0.975]\n","------------------------------------------------------------------------------\n","Intercept   2.579e+04   2273.053     11.347      0.000    2.11e+04    3.04e+04\n","Exp         9449.9623    378.755     24.950      0.000    8674.119    1.02e+04\n","==============================================================================\n","Omnibus:                        2.140   Durbin-Watson:                   1.648\n","Prob(Omnibus):                  0.343   Jarque-Bera (JB):                1.569\n","Skew:                           0.363   Prob(JB):                        0.456\n","Kurtosis:                       2.147   Cond. No.                         13.2\n","==============================================================================\n","\n","Notes:\n","[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n","\"\"\""],"text/html":["<table class=\"simpletable\">\n","<caption>OLS Regression Results</caption>\n","<tr>\n","  <th>Dep. Variable:</th>         <td>Salary</td>      <th>  R-squared:         </th> <td>   0.957</td>\n","</tr>\n","<tr>\n","  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.955</td>\n","</tr>\n","<tr>\n","  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   622.5</td>\n","</tr>\n","<tr>\n","  <th>Date:</th>             <td>Thu, 03 Nov 2022</td> <th>  Prob (F-statistic):</th> <td>1.14e-20</td>\n","</tr>\n","<tr>\n","  <th>Time:</th>                 <td>17:23:34</td>     <th>  Log-Likelihood:    </th> <td> -301.44</td>\n","</tr>\n","<tr>\n","  <th>No. Observations:</th>      <td>    30</td>      <th>  AIC:               </th> <td>   606.9</td>\n","</tr>\n","<tr>\n","  <th>Df Residuals:</th>          <td>    28</td>      <th>  BIC:               </th> <td>   609.7</td>\n","</tr>\n","<tr>\n","  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n","</tr>\n","<tr>\n","  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n","</tr>\n","</table>\n","<table class=\"simpletable\">\n","<tr>\n","      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n","</tr>\n","<tr>\n","  <th>Intercept</th> <td> 2.579e+04</td> <td> 2273.053</td> <td>   11.347</td> <td> 0.000</td> <td> 2.11e+04</td> <td> 3.04e+04</td>\n","</tr>\n","<tr>\n","  <th>Exp</th>       <td> 9449.9623</td> <td>  378.755</td> <td>   24.950</td> <td> 0.000</td> <td> 8674.119</td> <td> 1.02e+04</td>\n","</tr>\n","</table>\n","<table class=\"simpletable\">\n","<tr>\n","  <th>Omnibus:</th>       <td> 2.140</td> <th>  Durbin-Watson:     </th> <td>   1.648</td>\n","</tr>\n","<tr>\n","  <th>Prob(Omnibus):</th> <td> 0.343</td> <th>  Jarque-Bera (JB):  </th> <td>   1.569</td>\n","</tr>\n","<tr>\n","  <th>Skew:</th>          <td> 0.363</td> <th>  Prob(JB):          </th> <td>   0.456</td>\n","</tr>\n","<tr>\n","  <th>Kurtosis:</th>      <td> 2.147</td> <th>  Cond. No.          </th> <td>    13.2</td>\n","</tr>\n","</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."]},"metadata":{},"execution_count":62}]},{"cell_type":"code","source":["#p and t-values\n","print(model.tvalues, '\\n', model.pvalues)    \n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D83lWFOYg5SU","executionInfo":{"status":"ok","timestamp":1667496156463,"user_tz":-330,"elapsed":469,"user":{"displayName":"SHREYA GUGGARE","userId":"00326160733976591193"}},"outputId":"876e6dff-d6aa-41aa-94b3-6ea6620713cd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Intercept    11.346940\n","Exp          24.950094\n","dtype: float64 \n"," Intercept    5.511950e-12\n","Exp          1.143068e-20\n","dtype: float64\n"]}]},{"cell_type":"code","source":["#R squared values\n","(model.rsquared,model.rsquared_adj)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GzZxGUR_hDM-","executionInfo":{"status":"ok","timestamp":1667496186947,"user_tz":-330,"elapsed":440,"user":{"displayName":"SHREYA GUGGARE","userId":"00326160733976591193"}},"outputId":"451da3e5-8863-49a3-c933-008a2591ea87"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(0.9569566641435086, 0.9554194021486339)"]},"metadata":{},"execution_count":60}]}]}